import java.util.*;

public class Main {

    // Method to decode a value given its base
    public static int decodeValue(int base, String value) {
        return Integer.parseInt(value, base);
    }

    // Method to find the constant term using Lagrange interpolation
    public static double findConstantTerm(Map<Integer, Integer> points, int k) {
        double constantTerm = 0.0;

        // Perform Lagrange interpolation to calculate the constant term
        for (Map.Entry<Integer, Integer> entryI : points.entrySet()) {
            int xi = entryI.getKey();
            int yi = entryI.getValue();

            // Calculate the Lagrange basis polynomial Li(0)
            double li = 1.0;
            for (Map.Entry<Integer, Integer> entryJ : points.entrySet()) {
                int xj = entryJ.getKey();
                if (xj != xi) {
                    li *= (0.0 - xj) / (xi - xj);
                }
            }

            // Add contribution of the term to the constant term
            constantTerm += yi * li;
        }

        return constantTerm;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input: Number of roots and required points
        System.out.println("Enter the total number of roots (n): ");
        int n = scanner.nextInt();
        System.out.println("Enter the minimum number of roots required (k): ");
        int k = scanner.nextInt();

        // Input: (x, y) pairs
        Map<Integer, Integer> points = new HashMap<>();
        System.out.println("Enter the points (x, base, encoded y) for n roots:");

        for (int i = 0; i < n; i++) {
            System.out.print("Enter x: ");
            int x = scanner.nextInt();
            System.out.print("Enter base: ");
            int base = scanner.nextInt();
            System.out.print("Enter encoded y: ");
            String value = scanner.next();
            int y = decodeValue(base, value);
            points.put(x, y);
        }

        // Use the first k points to reconstruct the polynomial
        Map<Integer, Integer> selectedPoints = new HashMap<>();
        int count = 0;
        for (Map.Entry<Integer, Integer> entry : points.entrySet()) {
            if (count < k) {
                selectedPoints.put(entry.getKey(), entry.getValue());
                count++;
            } else {
                break;
            }
        }

        // Find the constant term (secret)
        double secret = findConstantTerm(selectedPoints, k);

        // Output the secret
        System.out.println("Secret (constant term): " + Math.round(secret));

        scanner.close();
    }
}
